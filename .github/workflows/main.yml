# 指定 GitHub Actions 的名称
name: Build HTML Docs

# 指定 GitHub Actions 触发的事件，包括 push 事件，定时执行 cron 事件，手动触发 workflow_dispatch 事件
on:
  push:
  schedule:
    - cron: '*/40 * * * *'
    - cron: '0 0 * * *'
  workflow_dispatch:

# 定义访问权限，这里表示需要访问仓库的 contents 和 deployments 权限
permissions:
  contents: write
  deployments: write

# 定义一个 job，job 的名称为 Build
jobs:
  build:
    name: Build
    # 定义 job 的运行环境为 ubuntu-latest
    runs-on: ubuntu-latest

    # 定义 job 中的各个步骤
    steps:
      # 第一个步骤：使用 actions/checkout 动作，将代码仓库 checkout 到 action 的工作目录
      - name: Checkout Build Files
        uses: actions/checkout@v2
      
      # 第二个步骤：使用 actions/setup-python 动作，配置 Python 环境
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # 第三个步骤：安装依赖
      - name: Deps
        run: |
          python -m pip install --upgrade pip
          echo 'requests' >> requirements.txt
          echo 'datetime' >> requirements.txt
          echo 'urllib3' >> requirements.txt
          echo 'jinja2' >> requirements.txt
          pip install -r requirements.txt
          pip3 install hammock python-dateutil packaging urllib3
      
      # 第四个步骤：刷新代码库中的内容
      - name: Run yanchi.py
        run: |
          python3 -u yanchi.py
          
       # 第五个步骤：创建 deploy 文件夹
      - name: Create Deploy Folder
        run: mkdir -p deploy
      
      # 第六个步骤：将生成的文件移动到 deploy 文件夹
      - name: Move Files to Deploy Folder
        run: |
          mv yanchi.json 
          mv *.mobileconfig 
      
      # 第七个步骤：将生成的文件复制回工作目录
      - name: Copy Files to Workspace
        run: cp -R * $GITHUB_WORKSPACE/
      
      # 第八个步骤：配置 git
      - name: Configure Git
        run: |
          git config --global user.name 'y0123456789'
          git config --global user.email '52168408+y0123456789@users.noreply.github.com'
      
      # 第九个步骤：提交和推送变更到 gh-pages 分支
      - name: Commit and Push Changes
        run: |
          git add .
          git commit -m 'Update files'
          git push origin gh-pages

      
